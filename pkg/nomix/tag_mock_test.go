package nomix

// Code generated by mocker. DO NOT EDIT.

import (
	"github.com/ctx42/testing/pkg/mock"
	"github.com/ctx42/testing/pkg/tester"
)

type TagMock struct {
	*mock.Mock
	t tester.T
}

func NewTagMock(t tester.T) *TagMock {
	t.Helper()
	return &TagMock{Mock: mock.NewMock(t), t: t}
}

func (_mck *TagMock) TagName() string {
	_mck.t.Helper()
	var _args []any
	_rets := _mck.Called(_args...)
	if len(_rets) != 1 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 string
	if _rFn, ok := _rets.Get(0).(func() string); ok {
		_r0 = _rFn()
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(string)
	}
	return _r0
}

func (_mck *TagMock) OnTagName() *mock.Call {
	_mck.t.Helper()
	var _args []any
	return _mck.On("TagName", _args...)
}

func (_mck *TagMock) TagKind() Kind {
	_mck.t.Helper()
	var _args []any
	_rets := _mck.Called(_args...)
	if len(_rets) != 1 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 Kind
	if _rFn, ok := _rets.Get(0).(func() Kind); ok {
		_r0 = _rFn()
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(Kind)
	}
	return _r0
}

func (_mck *TagMock) OnTagKind() *mock.Call {
	_mck.t.Helper()
	var _args []any
	return _mck.On("TagKind", _args...)
}

func (_mck *TagMock) TagValue() any {
	_mck.t.Helper()
	var _args []any
	_rets := _mck.Called(_args...)
	if len(_rets) != 1 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 any
	if _rFn, ok := _rets.Get(0).(func() any); ok {
		_r0 = _rFn()
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r
	}
	return _r0
}

func (_mck *TagMock) OnTagValue() *mock.Call {
	_mck.t.Helper()
	var _args []any
	return _mck.On("TagValue", _args...)
}
